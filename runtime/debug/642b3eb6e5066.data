a:14:{s:6:"config";s:1581:"a:5:{s:10:"phpVersion";s:6:"8.1.10";s:10:"yiiVersion";s:6:"2.0.46";s:11:"application";a:8:{s:3:"yii";s:6:"2.0.46";s:4:"name";s:14:"My Application";s:7:"version";s:3:"1.0";s:8:"language";s:5:"en-US";s:14:"sourceLanguage";s:5:"en-US";s:7:"charset";s:5:"UTF-8";s:3:"env";s:3:"dev";s:5:"debug";b:1;}s:3:"php";a:5:{s:7:"version";s:6:"8.1.10";s:6:"xdebug";b:0;s:3:"apc";b:0;s:8:"memcache";b:0;s:9:"memcached";b:0;}s:10:"extensions";a:5:{s:23:"yiisoft/yii2-bootstrap5";a:4:{s:4:"name";s:23:"yiisoft/yii2-bootstrap5";s:7:"version";s:7:"2.0.3.0";s:5:"alias";a:1:{s:15:"@yii/bootstrap5";s:72:"C:\xampp\htdocs\projecao\FreeWebBooks\vendor/yiisoft/yii2-bootstrap5/src";}s:9:"bootstrap";s:40:"yii\bootstrap5\i18n\TranslationBootstrap";}s:18:"yiisoft/yii2-debug";a:3:{s:4:"name";s:18:"yiisoft/yii2-debug";s:7:"version";s:8:"2.1.21.0";s:5:"alias";a:1:{s:10:"@yii/debug";s:67:"C:\xampp\htdocs\projecao\FreeWebBooks\vendor/yiisoft/yii2-debug/src";}}s:18:"yiisoft/yii2-faker";a:3:{s:4:"name";s:18:"yiisoft/yii2-faker";s:7:"version";s:7:"2.0.5.0";s:5:"alias";a:1:{s:10:"@yii/faker";s:67:"C:\xampp\htdocs\projecao\FreeWebBooks\vendor/yiisoft/yii2-faker/src";}}s:16:"yiisoft/yii2-gii";a:3:{s:4:"name";s:16:"yiisoft/yii2-gii";s:7:"version";s:7:"2.2.5.0";s:5:"alias";a:1:{s:8:"@yii/gii";s:65:"C:\xampp\htdocs\projecao\FreeWebBooks\vendor/yiisoft/yii2-gii/src";}}s:26:"yiisoft/yii2-symfonymailer";a:3:{s:4:"name";s:26:"yiisoft/yii2-symfonymailer";s:7:"version";s:7:"2.0.4.0";s:5:"alias";a:1:{s:18:"@yii/symfonymailer";s:75:"C:\xampp\htdocs\projecao\FreeWebBooks\vendor/yiisoft/yii2-symfonymailer/src";}}}}";s:3:"log";s:16757:"a:1:{s:8:"messages";a:15:{i:0;a:6:{i:0;s:68:"Bootstrap with yii\bootstrap5\i18n\TranslationBootstrap::bootstrap()";i:1;i:8;i:2;s:31:"yii\base\Application::bootstrap";i:3;d:1680555702.920538;i:4;a:0:{}i:5;i:2603832;}i:1;a:6:{i:0;s:33:"Bootstrap with yii\log\Dispatcher";i:1;i:8;i:2;s:31:"yii\base\Application::bootstrap";i:3;d:1680555702.922066;i:4;a:0:{}i:5;i:2714344;}i:2;a:6:{i:0;s:21:"Loading module: debug";i:1;i:8;i:2;s:26:"yii\base\Module::getModule";i:3;d:1680555702.922084;i:4;a:0:{}i:5;i:2715144;}i:3;a:6:{i:0;s:15:"Session started";i:1;i:4;i:2;s:21:"yii\web\Session::open";i:3;d:1680555702.932214;i:4;a:0:{}i:5;i:3479856;}i:4;a:6:{i:0;s:44:"Bootstrap with yii\debug\Module::bootstrap()";i:1;i:8;i:2;s:31:"yii\base\Application::bootstrap";i:3;d:1680555702.93746;i:4;a:0:{}i:5;i:4089904;}i:5;a:6:{i:0;s:19:"Loading module: gii";i:1;i:8;i:2;s:26:"yii\base\Module::getModule";i:3;d:1680555702.941814;i:4;a:0:{}i:5;i:4398896;}i:6;a:6:{i:0;s:42:"Bootstrap with yii\gii\Module::bootstrap()";i:1;i:8;i:2;s:31:"yii\base\Application::bootstrap";i:3;d:1680555702.942254;i:4;a:0:{}i:5;i:4423760;}i:14;a:6:{i:0;s:32:"Route requested: 'pagina/update'";i:1;i:8;i:2;s:34:"yii\web\Application::handleRequest";i:3;d:1680555702.94422;i:4;a:0:{}i:5;i:4664888;}i:15;a:6:{i:0;s:27:"Route to run: pagina/update";i:1;i:8;i:2;s:30:"yii\base\Controller::runAction";i:3;d:1680555702.946517;i:4;a:0:{}i:5;i:4787200;}i:16;a:6:{i:0;s:64:"Running action: app\controllers\PaginaController::actionUpdate()";i:1;i:8;i:2;s:36:"yii\base\InlineAction::runWithParams";i:3;d:1680555702.947513;i:4;a:0:{}i:5;i:4814048;}i:17;a:6:{i:0;s:31:"SHOW FULL COLUMNS FROM `pagina`";i:1;i:4;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.96383;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6219856;}i:18;a:6:{i:0;s:65:"Opening DB connection: mysql:host=localhost;dbname=free_web_books";i:1;i:4;i:2;s:23:"yii\db\Connection::open";i:3;d:1680555702.963879;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6222672;}i:23;a:6:{i:0;s:768:"SELECT
    `kcu`.`CONSTRAINT_NAME` AS `constraint_name`,
    `kcu`.`COLUMN_NAME` AS `column_name`,
    `kcu`.`REFERENCED_TABLE_NAME` AS `referenced_table_name`,
    `kcu`.`REFERENCED_COLUMN_NAME` AS `referenced_column_name`
FROM `information_schema`.`REFERENTIAL_CONSTRAINTS` AS `rc`
JOIN `information_schema`.`KEY_COLUMN_USAGE` AS `kcu` ON
    (
        `kcu`.`CONSTRAINT_CATALOG` = `rc`.`CONSTRAINT_CATALOG` OR
        (`kcu`.`CONSTRAINT_CATALOG` IS NULL AND `rc`.`CONSTRAINT_CATALOG` IS NULL)
    ) AND
    `kcu`.`CONSTRAINT_SCHEMA` = `rc`.`CONSTRAINT_SCHEMA` AND
    `kcu`.`CONSTRAINT_NAME` = `rc`.`CONSTRAINT_NAME`
WHERE `rc`.`CONSTRAINT_SCHEMA` = database() AND `kcu`.`TABLE_SCHEMA` = database()
AND `rc`.`TABLE_NAME` = 'pagina' AND `kcu`.`TABLE_NAME` = 'pagina'";i:1;i:4;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.978491;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6303256;}i:26;a:6:{i:0;s:37:"SELECT * FROM `pagina` WHERE `id`='2'";i:1;i:4;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.983938;i:4;a:3:{i:0;a:5:{s:4:"file";s:60:"C:\xampp\htdocs\projecao\FreeWebBooks\models\PaginaQuery.php";s:4:"line";i:32;s:8:"function";s:3:"one";s:5:"class";s:18:"yii\db\ActiveQuery";s:4:"type";s:2:"->";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:2;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6573528;}i:29;a:6:{i:0;s:11602:"UPDATE `pagina` SET `texto`='<h1>1 Introdução </h1>\r\n<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>\r\n\r\nNeste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).\r\n\r\n<h2>1.1 Definições, Contexto e História</h2>\r\nNo mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.\r\n\r\nPortanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.\r\n\r\nEngenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.\r\n\r\nHistoricamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.\r\n\r\nNo entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.\r\n\r\nConferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.\r\n\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nO comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:\r\n\r\nO problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.\r\n\r\nPassado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.\r\n\r\nNão existe bala de prata\r\nComo começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.\r\n\r\nSegundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.\r\n\r\nDaí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.\r\n\r\nSegundo Brooks, as dificuldades essenciais são as seguintes:\r\n\r\nComplexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.\r\n\r\nConformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.\r\n\r\nFacilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.\r\n\r\nInvisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.\r\n\r\nAs dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.\r\n\r\nAinda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.\r\n\r\nMundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.', `livro_id`=3 WHERE `id`=2";i:1;i:4;i:2;s:23:"yii\db\Command::execute";i:3;d:1680555702.989082;i:4;a:1:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:96;s:8:"function";s:4:"save";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"->";}}i:5;i:6857344;}}}";s:9:"profiling";s:30425:"a:3:{s:6:"memory";i:7037472;s:4:"time";d:0.1843099594116211;s:8:"messages";a:10:{i:19;a:6:{i:0;s:65:"Opening DB connection: mysql:host=localhost;dbname=free_web_books";i:1;i:80;i:2;s:23:"yii\db\Connection::open";i:3;d:1680555702.963895;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6224176;}i:20;a:6:{i:0;s:65:"Opening DB connection: mysql:host=localhost;dbname=free_web_books";i:1;i:96;i:2;s:23:"yii\db\Connection::open";i:3;d:1680555702.96558;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6272424;}i:21;a:6:{i:0;s:31:"SHOW FULL COLUMNS FROM `pagina`";i:1;i:80;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.965621;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6272904;}i:22;a:6:{i:0;s:31:"SHOW FULL COLUMNS FROM `pagina`";i:1;i:96;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.977269;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6278088;}i:24;a:6:{i:0;s:768:"SELECT
    `kcu`.`CONSTRAINT_NAME` AS `constraint_name`,
    `kcu`.`COLUMN_NAME` AS `column_name`,
    `kcu`.`REFERENCED_TABLE_NAME` AS `referenced_table_name`,
    `kcu`.`REFERENCED_COLUMN_NAME` AS `referenced_column_name`
FROM `information_schema`.`REFERENTIAL_CONSTRAINTS` AS `rc`
JOIN `information_schema`.`KEY_COLUMN_USAGE` AS `kcu` ON
    (
        `kcu`.`CONSTRAINT_CATALOG` = `rc`.`CONSTRAINT_CATALOG` OR
        (`kcu`.`CONSTRAINT_CATALOG` IS NULL AND `rc`.`CONSTRAINT_CATALOG` IS NULL)
    ) AND
    `kcu`.`CONSTRAINT_SCHEMA` = `rc`.`CONSTRAINT_SCHEMA` AND
    `kcu`.`CONSTRAINT_NAME` = `rc`.`CONSTRAINT_NAME`
WHERE `rc`.`CONSTRAINT_SCHEMA` = database() AND `kcu`.`TABLE_SCHEMA` = database()
AND `rc`.`TABLE_NAME` = 'pagina' AND `kcu`.`TABLE_NAME` = 'pagina'";i:1;i:80;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.978527;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6304672;}i:25;a:6:{i:0;s:768:"SELECT
    `kcu`.`CONSTRAINT_NAME` AS `constraint_name`,
    `kcu`.`COLUMN_NAME` AS `column_name`,
    `kcu`.`REFERENCED_TABLE_NAME` AS `referenced_table_name`,
    `kcu`.`REFERENCED_COLUMN_NAME` AS `referenced_column_name`
FROM `information_schema`.`REFERENTIAL_CONSTRAINTS` AS `rc`
JOIN `information_schema`.`KEY_COLUMN_USAGE` AS `kcu` ON
    (
        `kcu`.`CONSTRAINT_CATALOG` = `rc`.`CONSTRAINT_CATALOG` OR
        (`kcu`.`CONSTRAINT_CATALOG` IS NULL AND `rc`.`CONSTRAINT_CATALOG` IS NULL)
    ) AND
    `kcu`.`CONSTRAINT_SCHEMA` = `rc`.`CONSTRAINT_SCHEMA` AND
    `kcu`.`CONSTRAINT_NAME` = `rc`.`CONSTRAINT_NAME`
WHERE `rc`.`CONSTRAINT_SCHEMA` = database() AND `kcu`.`TABLE_SCHEMA` = database()
AND `rc`.`TABLE_NAME` = 'pagina' AND `kcu`.`TABLE_NAME` = 'pagina'";i:1;i:96;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.979163;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6307224;}i:27;a:6:{i:0;s:37:"SELECT * FROM `pagina` WHERE `id`='2'";i:1;i:80;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.98397;i:4;a:3:{i:0;a:5:{s:4:"file";s:60:"C:\xampp\htdocs\projecao\FreeWebBooks\models\PaginaQuery.php";s:4:"line";i:32;s:8:"function";s:3:"one";s:5:"class";s:18:"yii\db\ActiveQuery";s:4:"type";s:2:"->";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:2;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6574928;}i:28;a:6:{i:0;s:37:"SELECT * FROM `pagina` WHERE `id`='2'";i:1;i:96;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.984477;i:4;a:3:{i:0;a:5:{s:4:"file";s:60:"C:\xampp\htdocs\projecao\FreeWebBooks\models\PaginaQuery.php";s:4:"line";i:32;s:8:"function";s:3:"one";s:5:"class";s:18:"yii\db\ActiveQuery";s:4:"type";s:2:"->";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:2;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6589632;}i:30;a:6:{i:0;s:11602:"UPDATE `pagina` SET `texto`='<h1>1 Introdução </h1>\r\n<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>\r\n\r\nNeste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).\r\n\r\n<h2>1.1 Definições, Contexto e História</h2>\r\nNo mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.\r\n\r\nPortanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.\r\n\r\nEngenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.\r\n\r\nHistoricamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.\r\n\r\nNo entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.\r\n\r\nConferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.\r\n\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nO comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:\r\n\r\nO problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.\r\n\r\nPassado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.\r\n\r\nNão existe bala de prata\r\nComo começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.\r\n\r\nSegundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.\r\n\r\nDaí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.\r\n\r\nSegundo Brooks, as dificuldades essenciais são as seguintes:\r\n\r\nComplexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.\r\n\r\nConformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.\r\n\r\nFacilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.\r\n\r\nInvisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.\r\n\r\nAs dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.\r\n\r\nAinda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.\r\n\r\nMundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.', `livro_id`=3 WHERE `id`=2";i:1;i:80;i:2;s:23:"yii\db\Command::execute";i:3;d:1680555702.989117;i:4;a:1:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:96;s:8:"function";s:4:"save";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"->";}}i:5;i:6858104;}i:31;a:6:{i:0;s:11602:"UPDATE `pagina` SET `texto`='<h1>1 Introdução </h1>\r\n<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>\r\n\r\nNeste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).\r\n\r\n<h2>1.1 Definições, Contexto e História</h2>\r\nNo mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.\r\n\r\nPortanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.\r\n\r\nEngenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.\r\n\r\nHistoricamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.\r\n\r\nNo entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.\r\n\r\nConferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.\r\n\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nO comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:\r\n\r\nO problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.\r\n\r\nPassado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.\r\n\r\nNão existe bala de prata\r\nComo começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.\r\n\r\nSegundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.\r\n\r\nDaí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.\r\n\r\nSegundo Brooks, as dificuldades essenciais são as seguintes:\r\n\r\nComplexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.\r\n\r\nConformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.\r\n\r\nFacilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.\r\n\r\nInvisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.\r\n\r\nAs dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.\r\n\r\nAinda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.\r\n\r\nMundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.', `livro_id`=3 WHERE `id`=2";i:1;i:96;i:2;s:23:"yii\db\Command::execute";i:3;d:1680555703.073473;i:4;a:1:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:96;s:8:"function";s:4:"save";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"->";}}i:5;i:6871584;}}}";s:2:"db";s:29158:"a:1:{s:8:"messages";a:8:{i:21;a:6:{i:0;s:31:"SHOW FULL COLUMNS FROM `pagina`";i:1;i:80;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.965621;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6272904;}i:22;a:6:{i:0;s:31:"SHOW FULL COLUMNS FROM `pagina`";i:1;i:96;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.977269;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6278088;}i:24;a:6:{i:0;s:768:"SELECT
    `kcu`.`CONSTRAINT_NAME` AS `constraint_name`,
    `kcu`.`COLUMN_NAME` AS `column_name`,
    `kcu`.`REFERENCED_TABLE_NAME` AS `referenced_table_name`,
    `kcu`.`REFERENCED_COLUMN_NAME` AS `referenced_column_name`
FROM `information_schema`.`REFERENTIAL_CONSTRAINTS` AS `rc`
JOIN `information_schema`.`KEY_COLUMN_USAGE` AS `kcu` ON
    (
        `kcu`.`CONSTRAINT_CATALOG` = `rc`.`CONSTRAINT_CATALOG` OR
        (`kcu`.`CONSTRAINT_CATALOG` IS NULL AND `rc`.`CONSTRAINT_CATALOG` IS NULL)
    ) AND
    `kcu`.`CONSTRAINT_SCHEMA` = `rc`.`CONSTRAINT_SCHEMA` AND
    `kcu`.`CONSTRAINT_NAME` = `rc`.`CONSTRAINT_NAME`
WHERE `rc`.`CONSTRAINT_SCHEMA` = database() AND `kcu`.`TABLE_SCHEMA` = database()
AND `rc`.`TABLE_NAME` = 'pagina' AND `kcu`.`TABLE_NAME` = 'pagina'";i:1;i:80;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.978527;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6304672;}i:25;a:6:{i:0;s:768:"SELECT
    `kcu`.`CONSTRAINT_NAME` AS `constraint_name`,
    `kcu`.`COLUMN_NAME` AS `column_name`,
    `kcu`.`REFERENCED_TABLE_NAME` AS `referenced_table_name`,
    `kcu`.`REFERENCED_COLUMN_NAME` AS `referenced_column_name`
FROM `information_schema`.`REFERENTIAL_CONSTRAINTS` AS `rc`
JOIN `information_schema`.`KEY_COLUMN_USAGE` AS `kcu` ON
    (
        `kcu`.`CONSTRAINT_CATALOG` = `rc`.`CONSTRAINT_CATALOG` OR
        (`kcu`.`CONSTRAINT_CATALOG` IS NULL AND `rc`.`CONSTRAINT_CATALOG` IS NULL)
    ) AND
    `kcu`.`CONSTRAINT_SCHEMA` = `rc`.`CONSTRAINT_SCHEMA` AND
    `kcu`.`CONSTRAINT_NAME` = `rc`.`CONSTRAINT_NAME`
WHERE `rc`.`CONSTRAINT_SCHEMA` = database() AND `kcu`.`TABLE_SCHEMA` = database()
AND `rc`.`TABLE_NAME` = 'pagina' AND `kcu`.`TABLE_NAME` = 'pagina'";i:1;i:96;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.979163;i:4;a:2:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6307224;}i:27;a:6:{i:0;s:37:"SELECT * FROM `pagina` WHERE `id`='2'";i:1;i:80;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.98397;i:4;a:3:{i:0;a:5:{s:4:"file";s:60:"C:\xampp\htdocs\projecao\FreeWebBooks\models\PaginaQuery.php";s:4:"line";i:32;s:8:"function";s:3:"one";s:5:"class";s:18:"yii\db\ActiveQuery";s:4:"type";s:2:"->";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:2;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6574928;}i:28;a:6:{i:0;s:37:"SELECT * FROM `pagina` WHERE `id`='2'";i:1;i:96;i:2;s:21:"yii\db\Command::query";i:3;d:1680555702.984477;i:4;a:3:{i:0;a:5:{s:4:"file";s:60:"C:\xampp\htdocs\projecao\FreeWebBooks\models\PaginaQuery.php";s:4:"line";i:32;s:8:"function";s:3:"one";s:5:"class";s:18:"yii\db\ActiveQuery";s:4:"type";s:2:"->";}i:1;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:128;s:8:"function";s:7:"findOne";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"::";}i:2;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:94;s:8:"function";s:9:"findModel";s:5:"class";s:32:"app\controllers\PaginaController";s:4:"type";s:2:"->";}}i:5;i:6589632;}i:30;a:6:{i:0;s:11602:"UPDATE `pagina` SET `texto`='<h1>1 Introdução </h1>\r\n<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>\r\n\r\nNeste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).\r\n\r\n<h2>1.1 Definições, Contexto e História</h2>\r\nNo mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.\r\n\r\nPortanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.\r\n\r\nEngenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.\r\n\r\nHistoricamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.\r\n\r\nNo entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.\r\n\r\nConferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.\r\n\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nO comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:\r\n\r\nO problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.\r\n\r\nPassado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.\r\n\r\nNão existe bala de prata\r\nComo começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.\r\n\r\nSegundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.\r\n\r\nDaí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.\r\n\r\nSegundo Brooks, as dificuldades essenciais são as seguintes:\r\n\r\nComplexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.\r\n\r\nConformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.\r\n\r\nFacilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.\r\n\r\nInvisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.\r\n\r\nAs dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.\r\n\r\nAinda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.\r\n\r\nMundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.', `livro_id`=3 WHERE `id`=2";i:1;i:80;i:2;s:23:"yii\db\Command::execute";i:3;d:1680555702.989117;i:4;a:1:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:96;s:8:"function";s:4:"save";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"->";}}i:5;i:6858104;}i:31;a:6:{i:0;s:11602:"UPDATE `pagina` SET `texto`='<h1>1 Introdução </h1>\r\n<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>\r\n\r\nNeste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).\r\n\r\n<h2>1.1 Definições, Contexto e História</h2>\r\nNo mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.\r\n\r\nPortanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.\r\n\r\nEngenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.\r\n\r\nHistoricamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.\r\n\r\nNo entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.\r\n\r\nConferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.\r\n\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nCientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.\r\nO comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:\r\n\r\nO problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.\r\n\r\nPassado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.\r\n\r\nNão existe bala de prata\r\nComo começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.\r\n\r\nSegundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.\r\n\r\nDaí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.\r\n\r\nSegundo Brooks, as dificuldades essenciais são as seguintes:\r\n\r\nComplexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.\r\n\r\nConformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.\r\n\r\nFacilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.\r\n\r\nInvisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.\r\n\r\nAs dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.\r\n\r\nAinda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.\r\n\r\nMundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.', `livro_id`=3 WHERE `id`=2";i:1;i:96;i:2;s:23:"yii\db\Command::execute";i:3;d:1680555703.073473;i:4;a:1:{i:0;a:5:{s:4:"file";s:70:"C:\xampp\htdocs\projecao\FreeWebBooks\controllers\PaginaController.php";s:4:"line";i:96;s:8:"function";s:4:"save";s:5:"class";s:23:"yii\db\BaseActiveRecord";s:4:"type";s:2:"->";}}i:5;i:6871584;}}}";s:5:"event";s:3004:"a:17:{i:0;a:5:{s:4:"time";d:1680555702.943775;s:4:"name";s:13:"beforeRequest";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:19:"yii\web\Application";}i:1;a:5:{s:4:"time";d:1680555702.946817;s:4:"name";s:12:"beforeAction";s:5:"class";s:20:"yii\base\ActionEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:19:"yii\web\Application";}i:2;a:5:{s:4:"time";d:1680555702.947407;s:4:"name";s:12:"beforeAction";s:5:"class";s:20:"yii\base\ActionEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:32:"app\controllers\PaginaController";}i:3;a:5:{s:4:"time";d:1680555702.956848;s:4:"name";s:4:"init";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:22:"app\models\PaginaQuery";}i:4;a:5:{s:4:"time";d:1680555702.965567;s:4:"name";s:9:"afterOpen";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"yii\db\Connection";}i:5;a:5:{s:4:"time";d:1680555702.984537;s:4:"name";s:4:"init";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"app\models\Pagina";}i:6;a:5:{s:4:"time";d:1680555702.984591;s:4:"name";s:9:"afterFind";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"app\models\Pagina";}i:7;a:5:{s:4:"time";d:1680555702.988635;s:4:"name";s:14:"beforeValidate";s:5:"class";s:19:"yii\base\ModelEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"app\models\Pagina";}i:8;a:5:{s:4:"time";d:1680555702.988812;s:4:"name";s:13:"afterValidate";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"app\models\Pagina";}i:9;a:5:{s:4:"time";d:1680555702.988826;s:4:"name";s:12:"beforeUpdate";s:5:"class";s:19:"yii\base\ModelEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"app\models\Pagina";}i:10;a:5:{s:4:"time";d:1680555703.086145;s:4:"name";s:11:"afterUpdate";s:5:"class";s:21:"yii\db\AfterSaveEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:17:"app\models\Pagina";}i:11;a:5:{s:4:"time";d:1680555703.088504;s:4:"name";s:11:"afterAction";s:5:"class";s:20:"yii\base\ActionEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:32:"app\controllers\PaginaController";}i:12;a:5:{s:4:"time";d:1680555703.088524;s:4:"name";s:11:"afterAction";s:5:"class";s:20:"yii\base\ActionEvent";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:19:"yii\web\Application";}i:13;a:5:{s:4:"time";d:1680555703.08854;s:4:"name";s:12:"afterRequest";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:19:"yii\web\Application";}i:14;a:5:{s:4:"time";d:1680555703.088553;s:4:"name";s:10:"beforeSend";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:16:"yii\web\Response";}i:15;a:5:{s:4:"time";d:1680555703.089226;s:4:"name";s:12:"afterPrepare";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:16:"yii\web\Response";}i:16;a:5:{s:4:"time";d:1680555703.089285;s:4:"name";s:9:"afterSend";s:5:"class";s:14:"yii\base\Event";s:8:"isStatic";s:1:"0";s:11:"senderClass";s:16:"yii\web\Response";}}";s:4:"mail";s:6:"a:0:{}";s:8:"timeline";s:91:"a:3:{s:5:"start";d:1680555702.907951;s:3:"end";d:1680555703.092406;s:6:"memory";i:7037472;}";s:4:"dump";s:6:"a:0:{}";s:6:"router";s:1432:"a:3:{s:8:"messages";a:7:{i:7;a:6:{i:0;a:3:{s:4:"rule";s:3:"gii";s:5:"match";b:0;s:6:"parent";N;}i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944174;i:4;a:0:{}i:5;i:4660368;}i:8;a:6:{i:0;a:3:{s:4:"rule";s:12:"gii/<id:\w+>";s:5:"match";b:0;s:6:"parent";N;}i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944186;i:4;a:0:{}i:5;i:4661120;}i:9;a:6:{i:0;a:3:{s:4:"rule";s:41:"gii/<controller:[\w\-]+>/<action:[\w\-]+>";s:5:"match";b:0;s:6:"parent";N;}i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944193;i:4;a:0:{}i:5;i:4662192;}i:10;a:6:{i:0;a:3:{s:4:"rule";s:5:"debug";s:5:"match";b:0;s:6:"parent";N;}i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944199;i:4;a:0:{}i:5;i:4662944;}i:11;a:6:{i:0;a:3:{s:4:"rule";s:43:"debug/<controller:[\w\-]+>/<action:[\w\-]+>";s:5:"match";b:0;s:6:"parent";N;}i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944204;i:4;a:0:{}i:5;i:4663696;}i:12;a:6:{i:0;a:3:{s:4:"rule";s:1:"/";s:5:"match";b:0;s:6:"parent";N;}i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944209;i:4;a:0:{}i:5;i:4664448;}i:13;a:6:{i:0;s:55:"No matching URL rules. Using default URL parsing logic.";i:1;i:8;i:2;s:32:"yii\web\UrlManager::parseRequest";i:3;d:1680555702.944212;i:4;a:0:{}i:5;i:4664824;}}s:5:"route";s:13:"pagina/update";s:6:"action";s:48:"app\controllers\PaginaController::actionUpdate()";}";s:7:"request";s:43583:"a:15:{s:7:"flashes";a:0:{}s:10:"statusCode";i:302;s:14:"requestHeaders";a:20:{s:4:"host";s:9:"localhost";s:10:"connection";s:10:"keep-alive";s:14:"content-length";s:5:"13463";s:13:"cache-control";s:9:"max-age=0";s:9:"sec-ch-ua";s:64:""Google Chrome";v="111", "Not(A:Brand";v="8", "Chromium";v="111"";s:16:"sec-ch-ua-mobile";s:2:"?0";s:18:"sec-ch-ua-platform";s:9:""Windows"";s:25:"upgrade-insecure-requests";s:1:"1";s:6:"origin";s:16:"http://localhost";s:12:"content-type";s:33:"application/x-www-form-urlencoded";s:10:"user-agent";s:111:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36";s:6:"accept";s:135:"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";s:14:"sec-fetch-site";s:11:"same-origin";s:14:"sec-fetch-mode";s:8:"navigate";s:14:"sec-fetch-user";s:2:"?1";s:14:"sec-fetch-dest";s:8:"document";s:7:"referer";s:61:"http://localhost/projecao/FreeWebBooks/web/pagina/update?id=2";s:15:"accept-encoding";s:17:"gzip, deflate, br";s:15:"accept-language";s:35:"pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7";s:6:"cookie";s:210:"_csrf=fc8ad59f23e12fc8192e30b376dcbb47bb8cd135d8ec1ca0e8fde7055b973581a%3A2%3A%7Bi%3A0%3Bs%3A5%3A%22_csrf%22%3Bi%3A1%3Bs%3A32%3A%223UTpA3akeFkBnB8ULE8VKveO1wQlW-R0%22%3B%7D; PHPSESSID=terb4gqj4k6775nu90858u65ir";}s:15:"responseHeaders";a:9:{s:12:"X-Powered-By";s:10:"PHP/8.1.10";s:7:"Expires";s:29:"Thu, 19 Nov 1981 08:52:00 GMT";s:13:"Cache-Control";s:35:"no-store, no-cache, must-revalidate";s:6:"Pragma";s:8:"no-cache";s:8:"Location";s:59:"http://localhost/projecao/FreeWebBooks/web/pagina/view?id=2";s:12:"Content-Type";s:24:"text/html; charset=UTF-8";s:11:"X-Debug-Tag";s:13:"642b3eb6e5066";s:16:"X-Debug-Duration";s:3:"182";s:12:"X-Debug-Link";s:63:"/projecao/FreeWebBooks/web/debug/default/view?tag=642b3eb6e5066";}s:5:"route";s:13:"pagina/update";s:6:"action";s:48:"app\controllers\PaginaController::actionUpdate()";s:12:"actionParams";a:1:{s:2:"id";s:1:"2";}s:7:"general";a:5:{s:6:"method";s:4:"POST";s:6:"isAjax";b:0;s:6:"isPjax";b:0;s:7:"isFlash";b:0;s:18:"isSecureConnection";b:0;}s:11:"requestBody";a:3:{s:12:"Content Type";s:33:"application/x-www-form-urlencoded";s:3:"Raw";s:13463:"_csrf=b5M1K8JUnlKe5GLK06b5XGf6Y0YzCn4ogvzwI6LECC9cxmFbg2f_OfuiCYi95MEJK79bEHh8G2ezi6FP9elaHw%3D%3D&Pagina%5Btexto%5D=%3Ch1%3E1+Introdu%C3%A7%C3%A3o+%3C%2Fh1%3E%0D%0A%3Ch2%3EOur+civilization+runs+on+software.+%E2%80%93+Bjarne+Stroustrup%3C%2Fh2%3E%0D%0A%0D%0ANeste+primeiro+cap%C3%ADtulo%2C+vamos+definir+e+contextualizar+o+que+%C3%A9+Engenharia+de+Software+%28Se%C3%A7%C3%A3o+1.1%29+e+dar+uma+vis%C3%A3o+geral+dos+principais+assuntos+estudados+nessa+%C3%A1rea+da+Computa%C3%A7%C3%A3o+%28Se%C3%A7%C3%A3o+1.2%29.+O+objetivo+%C3%A9+propiciar+ao+leitor+uma+vis%C3%A3o+horizontal+da+%C3%A1rea+de+Engenharia+de+Software%2C+antes+de+nos+aprofundarmos+em+temas+espec%C3%ADficos.+Al%C3%A9m+disso%2C+sendo+Engenharia+de+Software+uma+%C3%A1rea+bastante+ampla%2C+vamos+caracterizar+os+tipos+de+sistemas+de+software+que+podem+se+beneficiar+das+t%C3%A9cnicas+e+conceitos+apresentados+neste+livro+%28Se%C3%A7%C3%A3o+1.3%29.+O+objetivo+%C3%A9%2C+logo+no+in%C3%ADcio%2C+evitar+falsas+expectativas+em+rela%C3%A7%C3%A3o+ao+conte%C3%BAdo+do+trabalho.+Por+fim%2C+iremos+apresentar+a+estrutura+e+os+assuntos+tratados+nos+cap%C3%ADtulos+restantes+do+livro+%28Se%C3%A7%C3%A3o+1.4%29.%0D%0A%0D%0A%3Ch2%3E1.1+Defini%C3%A7%C3%B5es%2C+Contexto+e+Hist%C3%B3ria%3C%2Fh2%3E%0D%0ANo+mundo+moderno%2C+tudo+%C3%A9+software.+Hoje+em+dia%2C+por+exemplo%2C+empresas+de+qualquer+tamanho+dependem+dos+mais+diversos+sistemas+de+informa%C3%A7%C3%A3o+para+automatizar+seus+processos.+Governos+tamb%C3%A9m+interagem+com+os+cidad%C3%A3os+por+meio+de+sistemas+computacionais%2C+por+exemplo%2C+para+coletar+impostos+ou+realizar+elei%C3%A7%C3%B5es.+Empresas+vendem%2C+por+meio+de+sistemas+de+com%C3%A9rcio+eletr%C3%B4nico%2C+uma+gama+imensa+de+produtos%2C+diretamente+para+os+consumidores.+Software+est%C3%A1+tamb%C3%A9m+embarcado+em+diferentes+dispositivos+e+produtos+de+engenharia%2C+incluindo+autom%C3%B3veis%2C+avi%C3%B5es%2C+sat%C3%A9lites%2C+rob%C3%B4s%2C+etc.+Por+fim%2C+software+est%C3%A1+contribuindo+para+renovar+ind%C3%BAstrias+e+servi%C3%A7os+tradicionais%2C+como+telecomunica%C3%A7%C3%B5es%2C+transporte+em+grandes+centros+urbanos%2C+hospedagem%2C+lazer+e+publicidade.%0D%0A%0D%0APortanto%2C+devido+a+sua+relev%C3%A2ncia+no+nosso+mundo%2C+n%C3%A3o+%C3%A9+surpresa+que+exista+uma+%C3%A1rea+da+Computa%C3%A7%C3%A3o+destinada+a+investigar+os+desafios+e+propor+solu%C3%A7%C3%B5es+que+permitam+desenvolver+sistemas+de+software+%E2%80%94+principalmente+aqueles+mais+complexos+e+de+maior+tamanho+%E2%80%94+de+forma+produtiva+e+com+qualidade.+Essa+%C3%A1rea+%C3%A9+chamada+de+Engenharia+de+Software.%0D%0A%0D%0AEngenharia+de+Software+trata+da+aplica%C3%A7%C3%A3o+de+abordagens+sistem%C3%A1ticas%2C+disciplinadas+e+quantific%C3%A1veis+para+desenvolver%2C+operar%2C+manter+e+evoluir+software.+Ou+seja%2C+Engenharia+de+Software+%C3%A9+a+%C3%A1rea+da+Computa%C3%A7%C3%A3o+que+se+preocupa+em+propor+e+aplicar+princ%C3%ADpios+de+engenharia+na+constru%C3%A7%C3%A3o+de+software.%0D%0A%0D%0AHistoricamente%2C+a+%C3%A1rea+surgiu+no+final+da+d%C3%A9cada+de+60+do+s%C3%A9culo+passado.+Nas+duas+d%C3%A9cadas+anteriores%2C+os+primeiros+computadores+modernos+foram+projetados+e+come%C3%A7aram+a+ser+usados+principalmente+para+resolu%C3%A7%C3%A3o+de+problemas+cient%C3%ADficos.+Ou+seja%2C+nessa+%C3%A9poca+software+n%C3%A3o+era+uma+preocupa%C3%A7%C3%A3o+central%2C+mas+sim+construir+m%C3%A1quinas+que+pudessem+executar+alguns+poucos+programas.+Em+resumo%2C+computadores+eram+usados+por+poucos+e+para+resolver+apenas+problemas+cient%C3%ADficos.%0D%0A%0D%0ANo+entanto%2C+progressos+cont%C3%ADnuos+nas+tecnologias+de+constru%C3%A7%C3%A3o+de+hardware+mudaram+de+forma+r%C3%A1pida+esse+cen%C3%A1rio.+No+final+da+d%C3%A9cada+de+60%2C+computadores+j%C3%A1+eram+mais+populares%2C+j%C3%A1+estavam+presentes+em+v%C3%A1rias+universidades+norte-americanas+e+europeias+e+j%C3%A1+chegavam+tamb%C3%A9m+em+algumas+grandes+empresas.+Os+cientistas+da+computa%C3%A7%C3%A3o+dessa+%C3%A9poca+se+viram+diante+de+um+novo+desafio%3A+como+os+computadores+estavam+se+tornando+mais+populares%2C+novas+aplica%C3%A7%C3%B5es+n%C3%A3o+apenas+se+tornavam+poss%C3%ADveis%2C+mas+come%C3%A7avam+a+ser+demandadas+pelos+usu%C3%A1rios+dos+grandes+computadores+da+%C3%A9poca.+Na+verdade%2C+os+computadores+eram+grandes+no+sentido+f%C3%ADsico+e+n%C3%A3o+em+poder+de+processamento%2C+se+comparado+com+os+computadores+atuais.+Dentre+essas+novas+aplica%C3%A7%C3%B5es%2C+as+principais+eram+sistemas+comerciais%2C+como+folha+de+pagamento%2C+controle+de+clientes%2C+controle+de+estoques%2C+etc.%0D%0A%0D%0AConfer%C3%AAncia+da+OTAN%3A+Em+outubro+de+1968%2C+um+grupo+de+cerca+de+50+renomados+Cientistas+da+Computa%C3%A7%C3%A3o+se+reuniu+durante+uma+semana+em+Garmisch%2C+na+Alemanha%2C+em+uma+confer%C3%AAncia+patrocinada+por+um+comit%C3%AA+cient%C3%ADfico+da+OTAN%2C+a+organiza%C3%A7%C3%A3o+militar+que+congrega+os+pa%C3%ADses+do+Atl%C3%A2ntico+Norte+%28veja+uma+foto+da+reuni%C3%A3o+na+pr%C3%B3xima+figura%29.+O+objetivo+da+confer%C3%AAncia+era+chamar+a+aten%C3%A7%C3%A3o+para+um+problema+crucial+do+uso+de+computadores%2C+o+chamado+software.+A+confer%C3%AAncia+produziu+um+relat%C3%B3rio%2C+com+mais+de+130+p%C3%A1ginas%2C+que+afirmava+a+necessidade+de+que+software+fosse+constru%C3%ADdo+com+base+em+princ%C3%ADpios+pr%C3%A1ticos+e+te%C3%B3ricos%2C+tal+como+ocorre+em+ramos+tradicionais+e+bem+estabelecidos+da+Engenharia.+Para+deixar+essa+proposta+mais+clara%2C+decidiu-se+cunhar+o+termo+Engenharia+de+Software.+Por+isso%2C+a+Confer%C3%AAncia+da+OTAN+%C3%A9+considerada+o+marco+hist%C3%B3rico+de+cria%C3%A7%C3%A3o+da+%C3%A1rea+de+Engenharia+de+Software.%0D%0A%0D%0ACientistas+na+confer%C3%AAncia+da+OTAN+de+1968+sobre+Engenharia+de+Software.+Reprodu%C3%A7%C3%A3o+gentilmente+autorizada+pelo+Prof.+Robert+McClure.%0D%0ACientistas+na+confer%C3%AAncia+da+OTAN+de+1968+sobre+Engenharia+de+Software.+Reprodu%C3%A7%C3%A3o+gentilmente+autorizada+pelo+Prof.+Robert+McClure.%0D%0AO+coment%C3%A1rio+a+seguir%2C+de+um+dos+participantes+da+Confer%C3%AAncia+da+OTAN%2C+ilustra+os+desafios+que+esperavam+a+rec%C3%A9m-criada+%C3%A1rea+de+pesquisa%3A%0D%0A%0D%0AO+problema+%C3%A9+que+certas+classes+de+sistemas+est%C3%A3o+colocando+demandas+sobre+n%C3%B3s+que+est%C3%A3o+al%C3%A9m+das+nossas+capacidades+e+das+teorias+e+m%C3%A9todos+de+projeto+que+conhecemos+no+presente+tempo.+Em+algumas+aplica%C3%A7%C3%B5es+n%C3%A3o+existe+uma+crise%2C+como+rotinas+de+ordena%C3%A7%C3%A3o+e+folhas+de+pagamento%2C+por+exemplo.+Por%C3%A9m%2C+estamos+tendo+dificuldades+com+grandes+aplica%C3%A7%C3%B5es.+N%C3%A3o+podemos+esperar+que+a+produ%C3%A7%C3%A3o+de+tais+sistemas+seja+f%C3%A1cil.%0D%0A%0D%0APassado+mais+de+meio+s%C3%A9culo+da+Confer%C3%AAncia+da+OTAN%2C+os+avan%C3%A7os+obtidos+em+t%C3%A9cnicas+e+m%C3%A9todos+para+constru%C3%A7%C3%A3o+de+software+s%C3%A3o+not%C3%A1veis.+Hoje%2C+j%C3%A1+se+tem+conhecimento+de+que+software+%E2%80%94+na+maioria+das+vezes+%E2%80%94+n%C3%A3o+deve+ser+constru%C3%ADdo+em+fases+estritamente+sequenciais%2C+como+ocorre+com+produtos+tradicionais+de+engenharia%2C+tais+como+Engenharia+Civil%2C+Engenharia+Mec%C3%A2nica%2C+Engenharia+Eletr%C3%B4nica%2C+etc.+J%C3%A1+existem+tamb%C3%A9m+padr%C3%B5es+que+podem+ser+usados+por+Engenheiros+de+Software+em+seus+novos+sistemas%2C+de+forma+que+eles+n%C3%A3o+precisem+reinventar+a+roda+toda+vez+que+enfrentarem+um+novo+problema+de+projeto.+Bibliotecas+e+frameworks+para+os+mais+diversos+fins+est%C3%A3o+largamente+dispon%C3%ADveis%2C+de+forma+que+desenvolvedores+de+software+podem+reusar+c%C3%B3digo+sem+se+preocupar+com+detalhes+inerentes+a+tarefas+como+implementar+interfaces+gr%C3%A1ficas%2C+criar+estruturas+de+dados%2C+acessar+bancos+de+dados%2C+criptografar+mensagens%2C+etc.+Prosseguindo%2C+as+mais+variadas+t%C3%A9cnicas+de+testes+podem+%28e+devem%29+ser+usadas+para+garantir+que+os+sistemas+em+constru%C3%A7%C3%A3o+tenham+qualidade+e+que+falhas+n%C3%A3o+ocorram+quando+eles+entrarem+em+produ%C3%A7%C3%A3o+e+forem+usados+por+clientes+reais.+Sabe-se+tamb%C3%A9m+que+sistemas+envelhecem%2C+como+outros+produtos+de+engenharia.+Logo%2C+software+tamb%C3%A9m+precisa+de+manuten%C3%A7%C3%A3o%2C+n%C3%A3o+apenas+corretiva%2C+para+corrigir+bugs+reportados+por+usu%C3%A1rios%2C+mas+tamb%C3%A9m+para+garantir+que+os+sistemas+continuem+f%C3%A1ceis+de+manter+e+entender%2C+mesmo+com+o+passar+dos+anos.%0D%0A%0D%0AN%C3%A3o+existe+bala+de+prata%0D%0AComo+come%C3%A7amos+a+afirmar+no+par%C3%A1grafo+anterior%2C+desenvolvimento+de+software+%C3%A9+diferente+de+qualquer+outro+produto+de+Engenharia%2C+principalmente+quando+se+compara+software+com+hardware.+Frederick+Brooks%2C+Pr%C3%AAmio+Turing+em+Computa%C3%A7%C3%A3o+%281999%29+e+um+dos+pioneiros+da+%C3%A1rea+de+Engenharia+de+Software%2C+foi+um+dos+primeiros+a+chamar+a+aten%C3%A7%C3%A3o+para+esse+fato.+Em+1987%2C+em+um+ensaio+intitulado+N%C3%A3o+Existe+Bala+de+Prata%3A+Ess%C3%AAncia+e+Acidentes+em+Engenharia+de+Software+%28link%29%2C+ele+discorreu+sobre+as+particularidades+da+%C3%A1rea+de+Engenharia+de+Software.%0D%0A%0D%0ASegundo+Brooks%2C+existem+dois+tipos+de+dificuldades+em+desenvolvimento+de+software%3A+dificuldades+essenciais+e+dificuldades+acidentais.+As+essenciais+s%C3%A3o+da+natureza+da+%C3%A1rea+e+dificilmente+ser%C3%A3o+superadas+por+qualquer+nova+tecnologia+ou+m%C3%A9todo+que+se+invente.%0D%0A%0D%0ADa%C3%AD+a+men%C3%A7%C3%A3o+%C3%A0+bala+de+prata+no+t%C3%ADtulo+do+ensaio.+Diz+a+lenda+que+uma+bala+de+prata+%C3%A9+a+%C3%BAnica+maneira+de+matar+um+lobisomem%2C+desde+que+usada+em+uma+noite+de+lua+cheia.+Ou+seja%2C+por+causa+das+dificuldades+essenciais%2C+n%C3%A3o+podemos+esperar+solu%C3%A7%C3%B5es+milagrosas+em+Engenharia+de+Software%2C+na+forma+de+balas+de+prata.+O+interessante+%C3%A9+que%2C+mesmo+conhecendo+o+ensaio+de+Brooks%2C+sempre+surgem+novas+tecnologias+que+s%C3%A3o+vendidas+como+se+fossem+balas+de+prata.%0D%0A%0D%0ASegundo+Brooks%2C+as+dificuldades+essenciais+s%C3%A3o+as+seguintes%3A%0D%0A%0D%0AComplexidade%3A+dentre+as+constru%C3%A7%C3%B5es+que+o+homem+se+prop%C3%B5e+a+realizar%2C+software+%C3%A9+uma+das+mais+desafiadoras+e+mais+complexas+que+existe.+Na+verdade%2C+como+dissemos+antes%2C+mesmo+constru%C3%A7%C3%B5es+de+engenharia+tradicional%2C+como+um+sat%C3%A9lite%2C+uma+usina+nuclear+ou+um+foguete%2C+s%C3%A3o+cada+vez+mais+dependentes+de+software.%0D%0A%0D%0AConformidade%3A+pela+sua+natureza+software+tem+que+se+adaptar+ao+seu+ambiente%2C+que+muda+a+todo+momento+no+mundo+moderno.+Por+exemplo%2C+se+as+leis+para+recolhimento+de+impostos+mudam%2C+normalmente+espera-se+que+os+sistemas+sejam+rapidamente+adaptados+%C3%A0+nova+legisla%C3%A7%C3%A3o.+Brooks+comenta+que+isso+n%C3%A3o+ocorre%2C+por+exemplo%2C+na+F%C3%ADsica%2C+pois+as+leis+da+natureza+n%C3%A3o+mudam+de+acordo+com+os+caprichos+dos+homens.%0D%0A%0D%0AFacilidade+de+mudan%C3%A7as%3A+que+consiste+na+necessidade+de+evoluir+sempre%2C+incorporando+novas+funcionalidades.+Na+verdade%2C+quanto+mais+bem+sucedido+for+um+sistema+de+software%2C+mais+demanda+por+mudan%C3%A7as+ele+recebe.%0D%0A%0D%0AInvisibilidade%3A+devido+%C3%A0+sua+natureza+abstrata%2C+%C3%A9+dif%C3%ADcil+visualizar+o+tamanho+e+consequentemente+estimar+o+esfor%C3%A7o+de+construir+um+sistema+de+software.%0D%0A%0D%0AAs+dificuldades+%282%29%2C+%283%29+e+%284%29+s%C3%A3o+espec%C3%ADficas+de+sistemas+de+software%2C+isto+%C3%A9%2C+elas+n%C3%A3o+ocorrem+em+outros+produtos+de+Engenharia%2C+pelo+menos+na+mesma+intensidade.+Por+exemplo%2C+quando+a+legisla%C3%A7%C3%A3o+ambiental+muda%2C+os+fabricantes+de+autom%C3%B3veis+t%C3%AAm+anos+para+se+conformar+%C3%A0s+novas+leis.+Adicionalmente%2C+carros+n%C3%A3o+s%C3%A3o+alterados%2C+pelo+menos+de+forma+essencial%2C+com+novas+funcionalidades%2C+ap%C3%B3s+serem+vendidos.+Por+fim%2C+um+carro+%C3%A9+um+produto+f%C3%ADsico%2C+com+peso%2C+altura%2C+largura%2C+assentos%2C+forma+geom%C3%A9trica%2C+etc.%2C+o+que+facilita+sua+avalia%C3%A7%C3%A3o+e+precifica%C3%A7%C3%A3o+por+consumidores+finais.%0D%0A%0D%0AAinda+segundo+Brooks%2C+desenvolvimento+de+software+enfrenta+tamb%C3%A9m+dificuldades+acidentais.+No+entanto%2C+elas+est%C3%A3o+associadas+a+problemas+tecnol%C3%B3gicos%2C+que+os+Engenheiros+de+Software+podem+resolver%2C+se+devidamente+treinados+e+caso+tenham+acesso+%C3%A0s+devidas+tecnologias+e+recursos.+Como+exemplo%2C+podemos+citar+as+seguintes+dificuldades%3A+um+compilador+que+produz+mensagens+de+erro+obscuras%2C+uma+IDE+que+possui+muitos+bugs+e+frequentemente+sofre+travamentos%2C+um+framework+que+n%C3%A3o+possui+documenta%C3%A7%C3%A3o%2C+uma+aplica%C3%A7%C3%A3o+Web+com+uma+interface+pouco+intuitiva%2C+etc.+Todas+essas+dificuldades+dizem+respeito+%C3%A0+solu%C3%A7%C3%A3o+adotada+e%2C+portanto%2C+n%C3%A3o+s%C3%A3o+uma+caracter%C3%ADstica+inerente+dos+sistemas+mencionados.%0D%0A%0D%0AMundo+Real%3A+Para+ilustrar+a+complexidade+envolvida+na+constru%C3%A7%C3%A3o+de+sistemas+de+software+reais%2C+vamos+dar+alguns+n%C3%BAmeros+sobre+o+tamanho+desses+sistemas%2C+em+linhas+de+c%C3%B3digo.+Por+exemplo%2C+o+sistema+operacional+Linux%2C+em+sua+vers%C3%A3o+4.1.3%2C+de+2017%2C+possui+cerca+de+25+milh%C3%B5es+de+linhas+de+c%C3%B3digo+e+contribui%C3%A7%C3%B5es+de+quase+1.700+engenheiros+%28link%29.+Para+mencionar+um+segundo+exemplo%2C+os+sistemas+do+Google+somavam+2+bilh%C3%B5es+de+linhas+de+c%C3%B3digo%2C+distribu%C3%ADdas+por+9+milh%C3%B5es+de+arquivos%2C+em+janeiro+de+2015+%28link%29.+Nesta+%C3%A9poca%2C+cerca+de+40+mil+solicita%C3%A7%C3%B5es+de+mudan%C3%A7as+de+c%C3%B3digo+%28commits%29+eram+realizadas%2C+em+m%C3%A9dia%2C+por+dia%2C+pelos+cerca+de+25+mil+Engenheiros+de+Software+empregados+pelo+Google+nessa+%C3%A9poca.&Pagina%5Blivro_id%5D=3";s:17:"Decoded to Params";a:2:{s:5:"_csrf";s:88:"b5M1K8JUnlKe5GLK06b5XGf6Y0YzCn4ogvzwI6LECC9cxmFbg2f_OfuiCYi95MEJK79bEHh8G2ezi6FP9elaHw==";s:6:"Pagina";a:2:{s:5:"texto";s:11451:"<h1>1 Introdução </h1>
<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>

Neste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).

<h2>1.1 Definições, Contexto e História</h2>
No mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.

Portanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.

Engenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.

Historicamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.

No entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.

Conferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.

Cientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.
Cientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.
O comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:

O problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.

Passado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.

Não existe bala de prata
Como começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.

Segundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.

Daí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.

Segundo Brooks, as dificuldades essenciais são as seguintes:

Complexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.

Conformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.

Facilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.

Invisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.

As dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.

Ainda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.

Mundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.";s:8:"livro_id";s:1:"3";}}}s:6:"SERVER";a:62:{s:16:"REDIRECT_MIBDIRS";s:24:"C:/xampp/php/extras/mibs";s:19:"REDIRECT_MYSQL_HOME";s:16:"\xampp\mysql\bin";s:21:"REDIRECT_OPENSSL_CONF";s:31:"C:/xampp/apache/bin/openssl.cnf";s:29:"REDIRECT_PHP_PEAR_SYSCONF_DIR";s:10:"\xampp\php";s:14:"REDIRECT_PHPRC";s:10:"\xampp\php";s:12:"REDIRECT_TMP";s:10:"\xampp\tmp";s:15:"REDIRECT_STATUS";s:3:"200";s:7:"MIBDIRS";s:24:"C:/xampp/php/extras/mibs";s:10:"MYSQL_HOME";s:16:"\xampp\mysql\bin";s:12:"OPENSSL_CONF";s:31:"C:/xampp/apache/bin/openssl.cnf";s:20:"PHP_PEAR_SYSCONF_DIR";s:10:"\xampp\php";s:5:"PHPRC";s:10:"\xampp\php";s:3:"TMP";s:10:"\xampp\tmp";s:9:"HTTP_HOST";s:9:"localhost";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:14:"CONTENT_LENGTH";s:5:"13463";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:14:"HTTP_SEC_CH_UA";s:64:""Google Chrome";v="111", "Not(A:Brand";v="8", "Chromium";v="111"";s:21:"HTTP_SEC_CH_UA_MOBILE";s:2:"?0";s:23:"HTTP_SEC_CH_UA_PLATFORM";s:9:""Windows"";s:30:"HTTP_UPGRADE_INSECURE_REQUESTS";s:1:"1";s:11:"HTTP_ORIGIN";s:16:"http://localhost";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:15:"HTTP_USER_AGENT";s:111:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36";s:11:"HTTP_ACCEPT";s:135:"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";s:19:"HTTP_SEC_FETCH_SITE";s:11:"same-origin";s:19:"HTTP_SEC_FETCH_MODE";s:8:"navigate";s:19:"HTTP_SEC_FETCH_USER";s:2:"?1";s:19:"HTTP_SEC_FETCH_DEST";s:8:"document";s:12:"HTTP_REFERER";s:61:"http://localhost/projecao/FreeWebBooks/web/pagina/update?id=2";s:20:"HTTP_ACCEPT_ENCODING";s:17:"gzip, deflate, br";s:20:"HTTP_ACCEPT_LANGUAGE";s:35:"pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7";s:11:"HTTP_COOKIE";s:210:"_csrf=fc8ad59f23e12fc8192e30b376dcbb47bb8cd135d8ec1ca0e8fde7055b973581a%3A2%3A%7Bi%3A0%3Bs%3A5%3A%22_csrf%22%3Bi%3A1%3Bs%3A32%3A%223UTpA3akeFkBnB8ULE8VKveO1wQlW-R0%22%3B%7D; PHPSESSID=terb4gqj4k6775nu90858u65ir";s:4:"PATH";s:849:"C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\xampp\php;C:\composer;C:\Program Files\Git\cmd;C:\Program Files\dotnet\;C:\Program Files (x86)\Microsoft SQL Server\150\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\150\Tools\Binn\;C:\Program Files\Microsoft SQL Server\150\Tools\Binn\;C:\Program Files\Microsoft SQL Server\150\DTS\Binn\;C:\HashiCorp\Vagrant\bin;C:\Program Files\Docker\Docker\resources\bin;C:\Users\haris\AppData\Local\Microsoft\WindowsApps;;C:\Users\haris\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\haris\AppData\Roaming\Composer\vendor\bin;C:\Users\haris\.dotnet\tools;C:\Program Files\Azure Data Studio\bin";s:10:"SystemRoot";s:10:"C:\WINDOWS";s:7:"COMSPEC";s:27:"C:\WINDOWS\system32\cmd.exe";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:6:"WINDIR";s:10:"C:\WINDOWS";s:16:"SERVER_SIGNATURE";s:95:"<address>Apache/2.4.54 (Win64) OpenSSL/1.1.1p PHP/8.1.10 Server at localhost Port 80</address>
";s:15:"SERVER_SOFTWARE";s:47:"Apache/2.4.54 (Win64) OpenSSL/1.1.1p PHP/8.1.10";s:11:"SERVER_NAME";s:9:"localhost";s:11:"SERVER_ADDR";s:3:"::1";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:3:"::1";s:13:"DOCUMENT_ROOT";s:15:"C:/xampp/htdocs";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:15:"C:/xampp/htdocs";s:12:"SERVER_ADMIN";s:20:"postmaster@localhost";s:15:"SCRIPT_FILENAME";s:51:"C:/xampp/htdocs/projecao/FreeWebBooks/web/index.php";s:11:"REMOTE_PORT";s:5:"51063";s:12:"REDIRECT_URL";s:40:"/projecao/FreeWebBooks/web/pagina/update";s:21:"REDIRECT_QUERY_STRING";s:4:"id=2";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:4:"id=2";s:11:"REQUEST_URI";s:45:"/projecao/FreeWebBooks/web/pagina/update?id=2";s:11:"SCRIPT_NAME";s:36:"/projecao/FreeWebBooks/web/index.php";s:8:"PHP_SELF";s:36:"/projecao/FreeWebBooks/web/index.php";s:18:"REQUEST_TIME_FLOAT";d:1680555702.889746;s:12:"REQUEST_TIME";i:1680555702;}s:3:"GET";a:1:{s:2:"id";s:1:"2";}s:4:"POST";a:2:{s:5:"_csrf";s:88:"b5M1K8JUnlKe5GLK06b5XGf6Y0YzCn4ogvzwI6LECC9cxmFbg2f_OfuiCYi95MEJK79bEHh8G2ezi6FP9elaHw==";s:6:"Pagina";a:2:{s:5:"texto";s:11451:"<h1>1 Introdução </h1>
<h2>Our civilization runs on software. – Bjarne Stroustrup</h2>

Neste primeiro capítulo, vamos definir e contextualizar o que é Engenharia de Software (Seção 1.1) e dar uma visão geral dos principais assuntos estudados nessa área da Computação (Seção 1.2). O objetivo é propiciar ao leitor uma visão horizontal da área de Engenharia de Software, antes de nos aprofundarmos em temas específicos. Além disso, sendo Engenharia de Software uma área bastante ampla, vamos caracterizar os tipos de sistemas de software que podem se beneficiar das técnicas e conceitos apresentados neste livro (Seção 1.3). O objetivo é, logo no início, evitar falsas expectativas em relação ao conteúdo do trabalho. Por fim, iremos apresentar a estrutura e os assuntos tratados nos capítulos restantes do livro (Seção 1.4).

<h2>1.1 Definições, Contexto e História</h2>
No mundo moderno, tudo é software. Hoje em dia, por exemplo, empresas de qualquer tamanho dependem dos mais diversos sistemas de informação para automatizar seus processos. Governos também interagem com os cidadãos por meio de sistemas computacionais, por exemplo, para coletar impostos ou realizar eleições. Empresas vendem, por meio de sistemas de comércio eletrônico, uma gama imensa de produtos, diretamente para os consumidores. Software está também embarcado em diferentes dispositivos e produtos de engenharia, incluindo automóveis, aviões, satélites, robôs, etc. Por fim, software está contribuindo para renovar indústrias e serviços tradicionais, como telecomunicações, transporte em grandes centros urbanos, hospedagem, lazer e publicidade.

Portanto, devido a sua relevância no nosso mundo, não é surpresa que exista uma área da Computação destinada a investigar os desafios e propor soluções que permitam desenvolver sistemas de software — principalmente aqueles mais complexos e de maior tamanho — de forma produtiva e com qualidade. Essa área é chamada de Engenharia de Software.

Engenharia de Software trata da aplicação de abordagens sistemáticas, disciplinadas e quantificáveis para desenvolver, operar, manter e evoluir software. Ou seja, Engenharia de Software é a área da Computação que se preocupa em propor e aplicar princípios de engenharia na construção de software.

Historicamente, a área surgiu no final da década de 60 do século passado. Nas duas décadas anteriores, os primeiros computadores modernos foram projetados e começaram a ser usados principalmente para resolução de problemas científicos. Ou seja, nessa época software não era uma preocupação central, mas sim construir máquinas que pudessem executar alguns poucos programas. Em resumo, computadores eram usados por poucos e para resolver apenas problemas científicos.

No entanto, progressos contínuos nas tecnologias de construção de hardware mudaram de forma rápida esse cenário. No final da década de 60, computadores já eram mais populares, já estavam presentes em várias universidades norte-americanas e europeias e já chegavam também em algumas grandes empresas. Os cientistas da computação dessa época se viram diante de um novo desafio: como os computadores estavam se tornando mais populares, novas aplicações não apenas se tornavam possíveis, mas começavam a ser demandadas pelos usuários dos grandes computadores da época. Na verdade, os computadores eram grandes no sentido físico e não em poder de processamento, se comparado com os computadores atuais. Dentre essas novas aplicações, as principais eram sistemas comerciais, como folha de pagamento, controle de clientes, controle de estoques, etc.

Conferência da OTAN: Em outubro de 1968, um grupo de cerca de 50 renomados Cientistas da Computação se reuniu durante uma semana em Garmisch, na Alemanha, em uma conferência patrocinada por um comitê científico da OTAN, a organização militar que congrega os países do Atlântico Norte (veja uma foto da reunião na próxima figura). O objetivo da conferência era chamar a atenção para um problema crucial do uso de computadores, o chamado software. A conferência produziu um relatório, com mais de 130 páginas, que afirmava a necessidade de que software fosse construído com base em princípios práticos e teóricos, tal como ocorre em ramos tradicionais e bem estabelecidos da Engenharia. Para deixar essa proposta mais clara, decidiu-se cunhar o termo Engenharia de Software. Por isso, a Conferência da OTAN é considerada o marco histórico de criação da área de Engenharia de Software.

Cientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.
Cientistas na conferência da OTAN de 1968 sobre Engenharia de Software. Reprodução gentilmente autorizada pelo Prof. Robert McClure.
O comentário a seguir, de um dos participantes da Conferência da OTAN, ilustra os desafios que esperavam a recém-criada área de pesquisa:

O problema é que certas classes de sistemas estão colocando demandas sobre nós que estão além das nossas capacidades e das teorias e métodos de projeto que conhecemos no presente tempo. Em algumas aplicações não existe uma crise, como rotinas de ordenação e folhas de pagamento, por exemplo. Porém, estamos tendo dificuldades com grandes aplicações. Não podemos esperar que a produção de tais sistemas seja fácil.

Passado mais de meio século da Conferência da OTAN, os avanços obtidos em técnicas e métodos para construção de software são notáveis. Hoje, já se tem conhecimento de que software — na maioria das vezes — não deve ser construído em fases estritamente sequenciais, como ocorre com produtos tradicionais de engenharia, tais como Engenharia Civil, Engenharia Mecânica, Engenharia Eletrônica, etc. Já existem também padrões que podem ser usados por Engenheiros de Software em seus novos sistemas, de forma que eles não precisem reinventar a roda toda vez que enfrentarem um novo problema de projeto. Bibliotecas e frameworks para os mais diversos fins estão largamente disponíveis, de forma que desenvolvedores de software podem reusar código sem se preocupar com detalhes inerentes a tarefas como implementar interfaces gráficas, criar estruturas de dados, acessar bancos de dados, criptografar mensagens, etc. Prosseguindo, as mais variadas técnicas de testes podem (e devem) ser usadas para garantir que os sistemas em construção tenham qualidade e que falhas não ocorram quando eles entrarem em produção e forem usados por clientes reais. Sabe-se também que sistemas envelhecem, como outros produtos de engenharia. Logo, software também precisa de manutenção, não apenas corretiva, para corrigir bugs reportados por usuários, mas também para garantir que os sistemas continuem fáceis de manter e entender, mesmo com o passar dos anos.

Não existe bala de prata
Como começamos a afirmar no parágrafo anterior, desenvolvimento de software é diferente de qualquer outro produto de Engenharia, principalmente quando se compara software com hardware. Frederick Brooks, Prêmio Turing em Computação (1999) e um dos pioneiros da área de Engenharia de Software, foi um dos primeiros a chamar a atenção para esse fato. Em 1987, em um ensaio intitulado Não Existe Bala de Prata: Essência e Acidentes em Engenharia de Software (link), ele discorreu sobre as particularidades da área de Engenharia de Software.

Segundo Brooks, existem dois tipos de dificuldades em desenvolvimento de software: dificuldades essenciais e dificuldades acidentais. As essenciais são da natureza da área e dificilmente serão superadas por qualquer nova tecnologia ou método que se invente.

Daí a menção à bala de prata no título do ensaio. Diz a lenda que uma bala de prata é a única maneira de matar um lobisomem, desde que usada em uma noite de lua cheia. Ou seja, por causa das dificuldades essenciais, não podemos esperar soluções milagrosas em Engenharia de Software, na forma de balas de prata. O interessante é que, mesmo conhecendo o ensaio de Brooks, sempre surgem novas tecnologias que são vendidas como se fossem balas de prata.

Segundo Brooks, as dificuldades essenciais são as seguintes:

Complexidade: dentre as construções que o homem se propõe a realizar, software é uma das mais desafiadoras e mais complexas que existe. Na verdade, como dissemos antes, mesmo construções de engenharia tradicional, como um satélite, uma usina nuclear ou um foguete, são cada vez mais dependentes de software.

Conformidade: pela sua natureza software tem que se adaptar ao seu ambiente, que muda a todo momento no mundo moderno. Por exemplo, se as leis para recolhimento de impostos mudam, normalmente espera-se que os sistemas sejam rapidamente adaptados à nova legislação. Brooks comenta que isso não ocorre, por exemplo, na Física, pois as leis da natureza não mudam de acordo com os caprichos dos homens.

Facilidade de mudanças: que consiste na necessidade de evoluir sempre, incorporando novas funcionalidades. Na verdade, quanto mais bem sucedido for um sistema de software, mais demanda por mudanças ele recebe.

Invisibilidade: devido à sua natureza abstrata, é difícil visualizar o tamanho e consequentemente estimar o esforço de construir um sistema de software.

As dificuldades (2), (3) e (4) são específicas de sistemas de software, isto é, elas não ocorrem em outros produtos de Engenharia, pelo menos na mesma intensidade. Por exemplo, quando a legislação ambiental muda, os fabricantes de automóveis têm anos para se conformar às novas leis. Adicionalmente, carros não são alterados, pelo menos de forma essencial, com novas funcionalidades, após serem vendidos. Por fim, um carro é um produto físico, com peso, altura, largura, assentos, forma geométrica, etc., o que facilita sua avaliação e precificação por consumidores finais.

Ainda segundo Brooks, desenvolvimento de software enfrenta também dificuldades acidentais. No entanto, elas estão associadas a problemas tecnológicos, que os Engenheiros de Software podem resolver, se devidamente treinados e caso tenham acesso às devidas tecnologias e recursos. Como exemplo, podemos citar as seguintes dificuldades: um compilador que produz mensagens de erro obscuras, uma IDE que possui muitos bugs e frequentemente sofre travamentos, um framework que não possui documentação, uma aplicação Web com uma interface pouco intuitiva, etc. Todas essas dificuldades dizem respeito à solução adotada e, portanto, não são uma característica inerente dos sistemas mencionados.

Mundo Real: Para ilustrar a complexidade envolvida na construção de sistemas de software reais, vamos dar alguns números sobre o tamanho desses sistemas, em linhas de código. Por exemplo, o sistema operacional Linux, em sua versão 4.1.3, de 2017, possui cerca de 25 milhões de linhas de código e contribuições de quase 1.700 engenheiros (link). Para mencionar um segundo exemplo, os sistemas do Google somavam 2 bilhões de linhas de código, distribuídas por 9 milhões de arquivos, em janeiro de 2015 (link). Nesta época, cerca de 40 mil solicitações de mudanças de código (commits) eram realizadas, em média, por dia, pelos cerca de 25 mil Engenheiros de Software empregados pelo Google nessa época.";s:8:"livro_id";s:1:"3";}}s:6:"COOKIE";a:2:{s:5:"_csrf";s:130:"fc8ad59f23e12fc8192e30b376dcbb47bb8cd135d8ec1ca0e8fde7055b973581a:2:{i:0;s:5:"_csrf";i:1;s:32:"3UTpA3akeFkBnB8ULE8VKveO1wQlW-R0";}";s:9:"PHPSESSID";s:26:"terb4gqj4k6775nu90858u65ir";}s:5:"FILES";a:0:{}s:7:"SESSION";a:1:{s:7:"__flash";a:0:{}}}";s:4:"user";s:2:"N;";s:5:"asset";s:6:"a:0:{}";s:7:"summary";a:12:{s:3:"tag";s:13:"642b3eb6e5066";s:3:"url";s:61:"http://localhost/projecao/FreeWebBooks/web/pagina/update?id=2";s:4:"ajax";i:0;s:6:"method";s:4:"POST";s:2:"ip";s:3:"::1";s:4:"time";d:1680555702.889746;s:10:"statusCode";i:302;s:8:"sqlCount";i:4;s:9:"mailCount";i:0;s:9:"mailFiles";a:0:{}s:10:"peakMemory";i:7037472;s:14:"processingTime";d:0.1843099594116211;}s:10:"exceptions";a:0:{}}